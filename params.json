{"name":"Squares [*]","tagline":"a lightweight ORM backed by any hash-like storage","body":"Hand-crafted from a solid piece of pure aircraft-grade Ruby and drawing distilled awesomeness from atmospheric pollutants, **Squares'** only dependency is you.\r\n\r\n## Installation Blah, Blah, Blah\r\n\r\n_I swear, this part of the README just rolled right out of_ `bundle gem squares`.\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'squares'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install squares\r\n\r\n_And yeah, I did enjoy typing_ `bundle gem squares`.  _It sounds like something to\r\neat.  Now I'm hungry._\r\n\r\n## Usage\r\n\r\n_Because you are going to use it._\r\n\r\n```ruby\r\nrequire 'squares'\r\n```\r\n\r\n### Write Models\r\n\r\n_How come they never write back?_\r\n\r\n```ruby\r\nclass Person < Squares::Base\r\n  properties :real_name, :age\r\nend\r\n```\r\n\r\nYou can also provide a default value if you switch to the `property` variant:\r\n\r\n```ruby\r\nclass Person < Squares::Base\r\n  property :irish?, default: false\r\n  property :eye_color, default: lambda { |person|\r\n    person.irish? ? 'green' : 'brown'\r\n  }\r\nend\r\n```\r\n\r\nNote that defaults which use callbacks (anything that responds to #call) are\r\nalways applied _after_ defaults which don't use callbacks.  Reverse the order\r\nof the above two properties, and their defaults would still work.\r\n\r\n### Bootstrapping\r\n\r\n_A funny word for \"setup & configure\".  Bootstrapping.  Bootstrapping.  See?  Funny._\r\n\r\nNow you can bootstrap `;)` your model to a hash-like storage object like so:\r\n\r\n```ruby\r\npeople_storage = Redis::Namespace.new(\r\n                   Person.underscore_name,\r\n                   :redis => $redis_connection )\r\n\r\nPerson.store = people_storage\r\n```\r\n\r\nOr if you just want to use a plain ole in-memory hash:\r\n\r\n```ruby\r\ntom_sellecks_mustache = {}\r\nSoup.store = tom_sellecks_mustache\r\n```\r\n\r\nSquares actually defaults the store to an empty hash, which means if you're ok\r\nwith in-memory, transient storage (e.g. when writing tests, etc.) you don't have\r\nto do any config-- er, bootstrapping `;)` at all!\r\n\r\nYou can setup a bunch of 'em like this:\r\n\r\n```ruby\r\n[Person, Place, SwampThing].each do |model|\r\n  model.store = LevelDB::DB.new(\"./tmp/#{model.underscore_name}\")\r\nend\r\n```\r\n\r\nBut it gets even better: the Squares module is an `Enumerable` which enumerates all\r\nthe model classes (inheritors of `Squares::Base`).  So you can:\r\n\r\n```ruby\r\nSquares.map &:underscore_name #=> ['person', 'place', 'swamp_thing']\r\n```\r\n\r\nOr better yet:\r\n\r\n```ruby\r\nSquares.each do |model|\r\n  model.store = LevelDB::DB.new './tmp/#{model.underscore_name}'\r\nend\r\n```\r\n\r\n### Onward To The Fun\r\n\r\nSquares does not auto-generate an `:id` for each new object --you'll do that\r\nand it will be used as the \"key\" in the hash storage.  In the following example,\r\nwe're creating a new `Person` and using 'spiderman' as the key:\r\n\r\n```ruby\r\npete = Person.new('spiderman', real_name: 'Peter Parker', age: 17)\r\n#                 ^^^ key ^^^  ^^^^^^^^^^^ properties ^^^^^^^^^^^\r\npete.save\r\n\r\nPerson.has_key? 'spiderman' #=> true\r\npete.id                     #=> 'spiderman'\r\n```\r\n\r\nWhen we retrieve an object, it returns an instance of that model:\r\n\r\n```ruby\r\nwallcrawler = Person['spiderman']\r\nwallcrawler = Person.find 'spiderman'      #=> same, shmame.\r\nwallcrawler.class                          #=> Person\r\nwallcrawler.id                             #=> 'spiderman'\r\n```\r\n\r\nAnd then, of course, you can\r\n\r\n```ruby\r\nwallcrawler.real_name                      #=> 'Peter Parker'\r\nwallcrawler[:real_name]                    #=> 'Peter Parker'\r\nwallcrawler.real_name = 'Petah Pahkah'     #=> Boston's own\r\nwallcrawler[:real_name] = 'Peshmerga Pete' #=> What is this, even?\r\n\r\nwallcrawler.changed?                       #=> true\r\nwallcrawler.save                           #=> now it's official\r\n\r\nwallcrawler.update_properties(             #=> also aliased as\r\n  real_name: 'Peter Parker'                #   #update_attributes\r\n)\r\n```\r\n\r\nOf course, for some types of storage, the model object has to be serialized and\r\nde-serialized when it's stored and retrieved.  Squares uses `Marshal.dump` and\r\n`Marshal.restore` to do that.  This means that custom marshalling can be added\r\nto your models (see [documentation on ruby Marshal][marshal]).\r\n\r\n### _Where_-able Computing\r\n\r\nYou can use the ActiveRecord-esque `.where` method with a block to retrieve records\r\nfor which the block returns true:\r\n\r\n```ruby\r\nPerson.where { |p| p.left_handed == true } #=> all the lefties\r\n```\r\n\r\nIn this mode, `.where` is essentially just like `.select`...which, oh yeah!\r\nSquares are enumerable! Yay!\r\n\r\n```ruby\r\nPerson.map(&:name) #=> an array containing all the names\r\n```\r\n\r\nBut you can also pass a hash to `.where` and it will do the expected thing:\r\n\r\n```ruby\r\nPerson.where( country: 'Latvaria' )  #=> Dr. Doom, I presume?\r\n```\r\n\r\nAnd if you give `.where` a series of symbol arguments, it will consider them as\r\nproperties, and check the truthyness of each:\r\n\r\n```ruby\r\nPerson.where( :flying?, :secret_lair )  #=> Superman!\r\n```\r\n\r\n### Square Hooks\r\n\r\nYou can hang a callable (such as a Proc, a Lambda or an instance of class Batman\r\nwhich implements `#call`) on any of Squares' polished, hand-crafted hooks:\r\n\r\n```ruby\r\nclass Hero\r\n  after_initialize do\r\n    tweet \"In a world...\"\r\n  end\r\nend\r\n```\r\n\r\nSquares supports the following hooks:\r\n\r\n* after_initialize\r\n* before/after_create\r\n* after_find (e.g. after `.find` and also `.[]`)\r\n* before/after_save\r\n* before_destroy (`#delete` does not trigger this callback)\r\n\r\nThere are two important things to remember about Squares' hooks: 1) while a hooked\r\ncallback is in progress, no other hooks will be triggered (i.e. hooks can't fire\r\nhooks), and 2) never feed Square Hooks after midnight.\r\n\r\n### What It Doesn't Do\r\n\r\nMuch like Wolverine, Squares doesn't do relationships.  You'll have to\r\nmaintain those in your code.  If you have an issue with that, leave me\r\nan issue, and I'll think about what that might mean.\r\n\r\nSquares neither knows nor cares about the type or contents of your model\r\ninstance's properties.  This has consequences.\r\n\r\nFirst, anything you stash had darn well better be marshal-able, or there\r\nwill be blood on the roller-rink.  Or at least errors.  Yeah, I've made\r\nsure there won't be blood (you're welcome), but watch out for errors.\r\nIf you run into problems, refer to the [documentation on ruby Marshal][marshal].\r\n\r\nSecond, there is no magic-fu for stuff like generating question methods\r\nfor boolean properties.  For example, it doesn't make a `#left_handed?` method\r\nout of your `property :left_handed`).  But hey, you know what you can\r\ndo?  Behold:\r\n\r\n```ruby\r\nclass Person\r\n  property :awesome?, default: true #=> What?! is that a \"?\"\r\nend\r\n```\r\n\r\nOk, don't interrupt me, I'm selling here...\r\n\r\n```ruby\r\nyou = Person.new\r\nyou.awesome? #=> true\r\n```\r\n\r\nOf course, Squares doesn't mind how you use `#awesome?` and the corresponding `#awesome=` methods:\r\n\r\n```ruby\r\nyou.awesome = 'yak hair'\r\nyou.awesome? #=> 'yak hair'\r\n```\r\n\r\nor\r\n\r\n```ruby\r\nyou.awesome = nil\r\nyou.awesome? #=> nil\r\n```\r\n\r\nBut hey, who cares, as long as yak hair is truthy?\r\n\r\n[marshal]:http://www.ruby-doc.org/core-2.1.5/Marshal.html\r\n\r\n## What's New in 0.3.0\r\n\r\n* property defaults can use a callback\r\n* implemented `#[]` on instances (to access properties)\r\n* `#update_properties` (i.e. `#update_attributes`)\r\n* square hooks\r\n* `#changed?`\r\n* `.where` accepts a hash, and/or series of properties\r\n\r\nYou can read in more detail on the [0.3.0 milestone][milestone]\r\n\r\n[milestone]:https://github.com/joelhelbling/squares/issues?q=milestone%3A0.3.0+sort%3Acreated-asc\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/joelhelbling/squares/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}